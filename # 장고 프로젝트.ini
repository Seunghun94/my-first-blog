# 장고 프로젝트
# 1. mkdir test - 폴더생성
# 2. python -m venv ksh - 가상환경 생성(이름:ksh)
# 3. ksh\Scripts\activate - 가상환경 실행 (에러날 경우 : 관리자 권한으로 실행하면됌)
#### 비활성화 : deactivate
# 4. python -m pip install --upgrade pip   - 장고 설치전 pip 최선버전 업그레이드
# 5. pip install django~=2.0.0  -장고설치
# 6. django-admin.py startproject mysite . (django-admin.py있는 폴더에서 실행되니 옮겨서 실행)
# 7. 설정변경
#    - settings.py : TIME_ZONE -> Asia/Seoul
#    - STATIC_ROOT = os.path.join(BASE_DIR, 'static') 맨밑줄에 추가 
#    - ALLOWED_HOSTS = ['127.0.0.1', 'pythonanywhere.com'] 이건 애플리케이션 배포할때 호스트 이름과 일치하지 않으면 설정 변경
# 8. 데이터베이스 설정
#  - mysite/settings.py 안에 DATABASES가 있음 
#  - 콘솔창에 코드 입력 : python manage.py migrate 
# 9. 웹서버 실행 : python manage.py runserver
#  - 웹서버 종료 : 컨트롤 + C
# 10. 어플리케이션 만들기 (blog)
# python manage.py startapp blog 
# django에서 어플리케이션 인식하게 만들기 -> settings.py 안에 INSTALLED_APPS 리스트 안에 blog 추가
# 11. blog 글 모델 만들기
# 12. blog/models.py 모두 삭제 및 코드 추가
### 
; from django.conf import settings
; from django.db import models
; from django.utils import timezone


; class Post(models.Model): # 모델을 정의하는 코드  Post : 모델 명 (항상 첫글자는 대문자)
;     author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) # 다른모델에 대한 링크의미
;     title = models.CharField(max_length=200) # 글자수 제한된 텍스트 (제목같은 짧은 문자열)
;     text = models.TextField() #글자 수 제한 없는 긴텍스트
;     created_date = models.DateTimeField( # 날짜와 시간을 의미
;             default=timezone.now)
;     published_date = models.DateTimeField(
;             blank=True, null=True)

;     def publish(self):
;         self.published_date = timezone.now()
;         self.save()

;     def __str__(self):
;         return self.title #리턴값으로 제목반환
###
#
# 13. 데이터 베이스에 생성한 모델 추가 
# 14. python manage.py makemigrations blog
# 15. python manage.py migrate blog 
# 16. 장고 관리자 화면 
# 17. 한국어 설정 - settings.py 에서 LANGUAGE_CODE = 'en-us'를 'ko'로 변경
# 18. 모델들 관리 
# 19. blog/admin.py 변경
#####
; from django.contrib import admin
; from .models import Post

; admin.site.register(Post)  #관리자 페이지에서 만든 모델을 보기위한 모델 등록
#####
# 20. 관리자 페이지 슈퍼계정 생성 
# 21. python manage.py runserver
# - url맨뒤에 /admin/ 추가
# 22. python manage.py createsuperuser
# 23. 이름, 이메일주소, 암호 입력 (소문자, 공백없이)
# 24. admin/ sh1021102@bgf.co.kr/ tmdgns13246!
# 25. 배포하기
# 26. Git 설치 -> git-scm.com
# 27. 설정 -> CMD 에서 경로 폴더로 옮긴뒤 git init -> git config --global user.name "Your Name" ->  git config --global user.email you@example.com
# 28. 특정 파일들 변경점 무시하도록 설정 -> .gitignore 파일을 생성 
#####
; *.pyc
; *~
; __pycache__
; myvenv
; db.sqlite3
; /static
; .DS_Store
######
# 29. git add 하기전 변경 된것 확인 -> git status 
# 30. 생성한 코드를 저장소에 넣기  CMD
# 31. git add -all.
# 32. git commit -m "My Django app, first commit"
# 33. github에 코드 배포 
# 34. github 로그인 -> new repository -> my-first-blog 이름으로 생성 -> https 복사 
# 35. git remote add origin http 붙여넣기
# git config --global http.sslVerify false (ssl 설정 끄기)
# 36. git push -u origin master
# 37. 로그인 
# 38. 확인 
# 39. pythonAnywhere에 블로그 설정하기  -> 가입 
# username 기억해야지 진행 가능 (KSH)
# 대시보드 또는 "콘솔(Consoles)" 페이지를 볼 수 있을 거예요. "배시(Bash)" 콘솔로 시작하는 옵션을 선택
# 40. gitHub에 있는 코드를 끌어와 저장소를 "복제"해 PythonAnywhere로 탑재
# git clone https://github.com/Seunghun94/my-first-blog.git
# tree my-first-blog  확인
# 41. PythonAnywhere에서 가상환경(virtualenv) 생성하기
# bash에서 계속 진행 
# $ cd my-first-blog
# $ virtualenv --python=python3.6 myvenv
# 가상환경 생성에 시간이 많이걸림 
# source myvenv/bin/activate - 가상환경실행
# pip install django~=2.0 
# python manage.py migrate - pythonanywhere 에 데이터베이스 생성
# python manage.py createsuperuser
# 로고 클릭 -> web -> add a new web app -> 도메인 이름 확정 -> 수동설정 -> python 3.6
# 가상환경 설정하기 -> virtualenv 가상환경 경로 -> /home/KSH(username)/my-first-blog/myvenv/
# WSGI 설정
# Code 부분 wsgi.py 클릭 -> 전체삭제 
#---
; import os
; import sys

; path = '/home/<your-PythonAnywhere-username>/my-first-blog'  # PythonAnywhere 계정으로 바꾸세요.
; if path not in sys.path:
;     sys.path.append(path)

; os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

; from django.core.wsgi import get_wsgi_application
; from django.contrib.staticfiles.handlers import StaticFilesHandler
; application = StaticFilesHandler(get_wsgi_application())
# --- 
# 붙여넣기 -> 탭 -> web -> 녹색버튼 (reload) 클릭
# 상단에 내 어플 주소 생성 
# 디버깅팁 : web tab에서 error log 링크 확인 
# 가장큰 오류 : host allow 뜨면 
# mysite/settings.py 에서 마지막줄에 ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', '.pythonanywhere.com']추가
# work flow : 로컬 -> 깃 -> 서버 


# 장고 urls
# mysite/urls.py
# blog.urls 가져오는 행 추가하기 (with include함수) -> mysite/urls.py에서 실행
# urls 라이브러리에서 include 추가 import 
#  path('', include('blog.urls')), 추가하기
# blog/urls.py 생성하기
; from django.urls import URLPattern, path
; from .import views 

; urlpatterns = [
;     path('', views.post_list, name = 'post_list'),
; ]
# 입력
# post_list라는 view가 루트 url에 할당되었음
# -> http://127.0.0.1:8000/ 주소로 들어왔을때 views.post_list를 보여주는것
# 마지막에 name = 'post_list'는 URL에 이름을 붙인것으로 뷰를 식별 (완전히 같을수도 다를수도 있음)
# url 이름은 외우기 쉽게 만들어야함
# 


# 장고 view
# 뷰는 어플의 로직을 넣는곳
# 모델에서 필요한 정보를 받아와서 템플릿에 전달함
# blog/views.py 에서 실행
; def post_list(request):
;     return render(request, 'blog/post_list.html', {})
# 추가
# post_list라는 함수 정의 -> request를 넘겨받아 render 메서드를 호출 
# render 메서드를 호출해서 받은 return값인 blog/post_list.html 템플릿을 보여줌 


# HTML -> 템플릿 
# blog/templates/blog 디렉토리에 저장
# post_list.html 파일 생성
; <html>
;     <p>Hi there!</p>
;     <p>It works!</p>
; </html>
# 추가
# 모든 웹페이지는 <html>시작 </html> 끝
# <p>는 문단 태그 
# HTML은 head와 body로 구분
# head : 문서 정보를 가지고 있지만 웹페이지에는 보이지 않음
# body : 웹페이지에 직접적으로 보이는 내용 
; <html>
;     <head>
;         <title>bgf's blog</title>
;     </head>
;     <body>
;         <p>Hi there!</p>
;         <p>It works!</p>
;     </body>
; </html>
# 으로 변경 
# html -> body -> p 순서
# 맞춤형 템플릿 만들기 
; <h1>A heading</h1> - 큰 제목
; <h2>A sub-heading</h2> - 중 제목
; <h3>A sub-sub-heading</h3> - 소 제목... <h6>레벨까지 사용할 수 있습니다.
; <em>text</em> - 텍스트 기울기 (Italic)
; <strong>text</strong> - 텍스트를 두껍게(Bold)
; <br /> - 줄바꿈 (br은 스스로 닫히는 태그로 속성을 사용할 수 없습니다)
; <a href="http://djangogirls.org">link</a> - 하이퍼링크 걸기
; <ul><li>first item</li><li>second item</li></ul>- 목록 만들기
; <div></div> - 페이지 섹션
# 
#
; <html>
;     <head>
;         <title>Django Girls blog</title>
;     </head>
;     <body>
;         <div>
;             <h1><a href="">Django Girls Blog</a></h1>
;         </div>

;         <div>
;             <p>published: 14.06.2014, 12:14</p>
;             <h2><a href="">My first post</a></h2>
;             <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>
;         </div>

;         <div>
;             <p>published: 14.06.2014, 12:14</p>
;             <h2><a href="">My second post</a></h2>
;             <p>Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut f.</p>
;         </div>
;     </body>
; </html>
# post_list.html 변경


# 변경 내용 배포하기 
# (로컬)CMD -> git status 
# git add --all .  -> 해당 디렉토리 변경내용 포함 시켜라
# git status -> 초록색이 수정사항
# git commit -m "changed the HTML for the site."  -> 히스토리에 저장 
# git push  -> 업로드 

# pythonAnywhere 에서 새 코드를 가져와 웹 앱을 다시 불러오기 
# PythonAnywhere 콘솔 페이지 -> 배쉬 
# cd my-first-blog
# git pull
# web tab에서 reload


# 장고 ORM 과 쿼리셋(Query Sets)
# 쿼리셋 : 모델의 객체 목록 
# 로컬 anaconda -> python manage.py shell  (가상환경 / Django 경로)
# from blog.models import Post
# Post.objects.all() -> 입력한 모든글 출력 
# 객체 생성하기
# 데이터 베이스에 새 글 객체 저장 방법
# from django.contrib.auth.models import User -> me라는 객체 가져오기
# User.objects.all() -> User 목록확인
# me = User.objects.get(username = 'admin') -> admin은 목록에 있던것 
# Post.objects.create(author = me, title = 'Sample title', text = 'Test')
# Post.objects.all() -> 포스트된 글 목록 확인 

# 필터링 하기
# 쿼리셋은 데이터를 필터링 하는 기능 
# Post.objects.all() -> 에서 all 대신 filter 사용
# 작성자가 admin인것 필터
# Post.objects.filter(author = me )
# 제목에 title 글자 들어간 것 필터
# Post.objects.filter(title__contains = 'title') -> 반드시 밑줄 두개
# 게시일로 과거에 작성글 필터
# from django.utils import timezone
# Post.objects.filter(published_date__lte = timezone.now())
# post = Post.objects.get(title = 'Sample title') -> 게시물의 인스턴스 획득
# post.publish() -> 게시물 게시 
# Post.objects.filter(published_date__lte=timezone.now())

# 정렬하기
# 쿼리셋은 객체 목록을 정렬할 수 있음
# created_date 필드 정렬하기
# Post.objects.order_by('created_date') -> created_date앞에 -붙여주면 내림차순 정렬 가능 

# 쿼리셋 연결하기
# Post.objects.filter(published_date__lte = timezone.now()).order_by('published_date')

# django shell 종료 -> exit()


# 템플릿 동적 데이터 
# 데이터베이스안에 저장된 모델을 가져와 템플릿에 넣기
# view는 모델과 템플릿을 연결하는 역할
# ex) post_list를 view에서 보여주고 이를 템플릿에 전달하기 위해서는 모델을 가져와야함
# 뷰가 템플릿에서 모델을 선택하도록 만들기
# blos/views.py 파일 열기
# 다른 파일 코드 가져오기
# from .models import Post
# Post 모델에서 블로그 글을 가져오기 위해선 쿼리셋이 필요

# 쿼리셋 
# 게시일 기준 정렬
# Post.objects.filter(published_date__lte = timezone()).order_by('published_date')
# blog/views.py -> def post_list(request) 함수에 아래코드 추가
# 먼저 timezone 모듈 불러오기 -> from django.utils import timezone
; from django.shortcuts import render
; from django.utils import timezone
; from .models import Post

; def post_list(request):
;     posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
;     return render(request, 'blog/post_list.html', {})
# 여기서 빠진 부분은 posts 쿼리셋을 템플릿 컨텍스트에 전달하는것
# posts 변수 생성 -> 쿼리셋의 이름
# posts 쿼리셋을 템플릿에 보내기
# {}이곳에 템플릿을 사용하기 위해 매개변수 추가할것 
# ex ) 매개변수를 'posts'라고 해보자
# {'posts':posts} -> : 앞에는 문자열이 와야해서 ''안에 쓰기

# 템플릿에서 쿼리셋 보이게 하기
# 템플릿 태그 : HTML에 파이썬 코드 넣을 수 없어서 python -> HTML 변경
# post 목록 템플릿 보여주기
# 템플릿 안에 있는값을 출력하기 위해서는 변수이름안에 중괄호를 넣어 표시해야함
# {{ posts }} -> blog/templates/blog/post_list.html
# <div> 두번째부터 </div> 세번째 사이에 삭제 하고 변수넣기
# -> 응용해서 for loob 이용하기
; {% for post in posts %}
;     {{ post }}
; {% endfor %}
#  디자인 수정
# post_list.html
; <html>
;     <head>
;         <title>ksh blog</title>
;     </head>
;     <body>
;         <div>
;             <h1><a href="/">KSH Blog</a></h1>
;         </div>
        
;         {% for post in posts %}
;             <div>
;                 <p>published: {{ post.published_date }}</p>
;                 <h1><a href="">{{ post.title }}</a></h1>
;                 <p>{{ post.text|linebreaksbr }}</p>
;             </div>
;         {% endfor %}
;     </body>
; </html>
# {% for %}, {% endfor %}사이에 넣은 모든것은 목록의 모든객체를 반복하게 됌 

# Local CMD
# git status -> git add --all -> git status -> git commit -m "ok" -> git push

# pythonAnywhere bash 
# cd my-first-blog
# git pull
# reload 
# -> 로컬 게시물이랑 다를 수밖에 없음 동기화 되지 않음


# CSS 만들기 
# 부트스트랩 사용해서 꾸미기
# post_list.html <head>에 링크 넣기
; <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
; <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
# 파일추가가 아닌 인터넷에 있는 파일을 연결하는것 


# 정적 파일 (CSS와 이미지파일) -> blog 앱에 정적파일을 추가하기만 하면 됌
# blog앱안에 static이라는 폴더 생성

# CSS파일을 만들어 나만의 스타일로 만들기
# static안에 css 폴더 생성 -> blog.css 파일 생성
; h1 a {
;     color: #FCA205;
; }
# 코드 추가
# -> h1 a 는 css셀렉터라고 함 -> h1 요소 안에 어떠한 a 요소를 넣어 스타일을 적용
# ex> <h1><a href="">link</a></h1> 이라고 하면 해당 색상으로 변경 
# css파일에서 html 태그로 요소 식별
# ex> <a href="https://en.wikipedia.org/wiki/Django" class="external_link" id="link_to_wiki_page">
# -> 태그 이름 a / 클래스 external_link/ id link_to_wiki_page

# Css를 HTML에 추가하기
# post_list.html 파일 첫줄에 {% load static %} 추가
# -> 정적파일 로딩
# <head>와 </head>사이에 부트스트랩 css파일 링크아래에 코드 추가
# <link rel="stylesheet" href="{% static 'css/blog.css' %}">
# 브라우저는 주어진 순서대로 파일 읽으므로 순서 중요

# 왼쪽 여백 주기
# blog/static/css/blog.css 수정
; body {
;     padding-left: 15px;
; }
# 
# 제목 폰트 바꾸기
# blog/templates/blog/post_list.html 수정
# <link href="//fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext" rel="stylesheet" type="text/css">
# <head>부분 아래에 붙여넣기 
#
# blog/static/css/blog.css에 {{}} 사이에 추가 
# font-family: 'Lobster'; 
# 

# HTML 코드의 일부 이름 지정
# 제목이 포함된 div에 page-header라는 클래스명 붙이기
# blog/templates/blog/post_list.html
; <div class="page-header">
;     <h1><a href="/">Django Girls Blog</a></h1>
; </div>
# 블로그 게시글 나타내는 div에 post 라고 클래스명 붙이기
; <div class="post">
;     <p>published: {{ post.published_date }}</p>
;     <h1><a href="">{{ post.title }}</a></h1>
;     <p>{{ post.text|linebreaksbr }}</p>
; </div>
# 

# 여러 선택자들 추가하기 
# 클래스 선택자는 .으로 시작함
# blog/static/css/blog.css 파일에 코드 복붙 
; .page-header {
;     background-color: #ff9400;
;     margin-top: 0;
;     padding: 20px 20px 20px 40px;
; }

; .page-header h1, .page-header h1 a, .page-header h1 a:visited, .page-header h1 a:active {
;     color: #ffffff;
;     font-size: 36pt;
;     text-decoration: none;
; }

; .content {
;     margin-left: 40px;
; }

; h1, h2, h3, h4 {
;     font-family: 'Lobster', cursive;
; }

; .date {
;     color: #828282;
; }

; .save {
;     float: right;
; }

; .post-form textarea, .post-form input {
;     width: 100%;
; }

; .top-menu, .top-menu:hover, .top-menu:visited {
;     color: #ffffff;
;     float: right;
;     font-size: 26pt;
;     margin-right: 20px;
; }

; .post {
;     margin-bottom: 70px;
; }

; .post h1 a, .post h1 a:visited {
;     color: #000000;
; }
# 

# blog/templates/blog/post_list.html 파일안에 코드 넣기
; <div class="content container">
;     <div class="row">
;         <div class="col-md-8">
;             {% for post in posts %}
;                 <div class="post">
;                     <div class="date">
;                         <p>published: {{ post.published_date }}</p>
;                     </div>
;                     <h1><a href="">{{ post.title }}</a></h1>
;                     <p>{{ post.text|linebreaksbr }}</p>
;                 </div>
;             {% endfor %}
;         </div>
;     </div>
; </div>
#


# 템플릿 확장하기
# 웹사이트 안의 서로 다른 페이지에서 HTML의 일부를 동일하게 재사용
# 레이아웃 복사 기능

# 기본템플릿 생성하기 
# blog/templates/blog/base.html 생성
; {% load static %}
; <html>
;     <head>
;         <title>Django Girls blog</title>
;         <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
;         <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
;         <link href='//fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
;         <link rel="stylesheet" href="{% static 'css/blog.css' %}">
;     </head>
;     <body>
;         <div class="page-header">
;             <h1><a href="/">Django Girls Blog</a></h1>
;         </div>

;         <div class="content container">
;             <div class="row">
;                 <div class="col-md-8">
;                 {% for post in posts %}
;                     <div class="post">
;                         <div class="date">
;                             {{ post.published_date }}
;                         </div>
;                         <h1><a href="">{{ post.title }}</a></h1>
;                         <p>{{ post.text|linebreaksbr }}</p>
;                     </div>
;                 {% endfor %}
;                 </div>
;             </div>
;         </div>
;     </body>
; </html>
# 복붙
# <body>의 내용 변경
; <body>
;     <div class="page-header">
;         <h1><a href="/">Django Girls Blog</a></h1>
;     </div>
;     <div class="content container">
;         <div class="row">
;             <div class="col-md-8">
;             {% block content %}
;             {% endblock %}
;             </div>
;         </div>
;     </div>
; </body>
# 
# 변경점 : {% block content %} /   {% endblock %}  변경했음
# block : 공간을 만든것 


# 사용법 : post_list.html 수정
; {% for post in posts %}
;     <div class="post">
;         <div class="date">
;             {{ post.published_date }}
;         </div>
;         <h1><a href="">{{ post.title }}</a></h1>
;         <p>{{ post.text|linebreaksbr }}</p>
;     </div>
; {% endfor %}
# 이거 남기고 삭제 
# 블록 태그 추가
# base.html파일의 태그와 일치해야함
# 콘텐츠 블록에 속한 모든 코드를 포함하게 만들어야함 
; {% block content %}
;     {% for post in posts %}
;         <div class="post">
;             <div class="date">
;                 {{ post.published_date }}
;             </div>
;             <h1><a href="">{{ post.title }}</a></h1>
;             <p>{{ post.text|linebreaksbr }}</p>
;         </div>
;     {% endfor %}
; {% endblock %}
# {% block content %}와 {% endblock %}사이에 모든 코드를 넣기
# 두 템플릿 연결하기
# 확장태그를 맨처음에 추가 -> post_list.html
; {% extends 'blog/base.html' %}
; {% block content %}
;     {% for post in posts %}
;         <div class="post">
;             <div class="date">
;                 {{ post.published_date }}
;             </div>
;             <h1><a href="">{{ post.title }}</a></h1>
;             <p>{{ post.text|linebreaksbr }}</p>
;         </div>
;     {% endfor %}
; {% endblock %}

# 프로그램 어플 확장하기
# Post에 템플릿 링크 만들기 
# blog/templates/blog/post_list.html 에 링크 추가
# <h1><a href="">{{ post.title }}</a></h1> -> 변경 -> <h1><a href="{% url 'post_detail' pk=post.pk %}">{{ post.title }}</a></h1>

# Post 상세 페이지 URL 만들기 
# post_detail뷰가 보이게 urls.py에 URL 생성
# 첫 게시물의 상세 페이지 URL이 http://127.0.0.1:80000/post1/1/   이 될것
# path('post/<int:pk>/', views.post_detail, name='post_detail') 코드를 blog/urls.py에 추가

# Post 상세 페이지 내 뷰 추가하기
# 뷰에 매개변수 pk를 식별해야함
# urls에서 사용된 이름이랑 동일하게 이름을 사용해야함  -> views 
# pk에 해당하는 Post가 없을 경우 404 보여주기 + post_detail
# blog/views.py 에 추가
; from django.shortcuts import render, get_object_or_404
; def post_detail(request, pk):
;     post = get_object_or_404(Post, pk=pk)
;     return render(request, 'blog/post_detail.html', {'post': post})

# Post_detail 템플릿 추가하기
# blog/templates/blog 안에 post_detail.html 파일 생성 
; {% extends 'blog/base.html' %}

; {% block content %}
;     <div class="post">
;         {% if post.published_date %}
;             <div class="date">
;                 {{ post.published_date }}
;             </div>
;         {% endif %}
;         <h1>{{ post.title }}</h1>
;         <p>{{ post.text|linebreaksbr }}</p>
;     </div>
; {% endblock %}
# 코드 삽입 -> base.html을 확장해서 사용 
# content block에서 게시일, 제목, 내용만 보이게 만듬
# if - endif 태그는 내용이 있는지 확인할떄 사용

# 배포하기
# pythonanywhere 에서 배포
# Local CMD 
# git status
# git add --all
# git status 
# git commit -m "ok"
# git push

# PythonAnywhere Bash
# cd my-first-blog
# git pull
# web reload 하기

# 장고폼
# 블로그 글 추가 / 수정 기능 추가
# ModelForm을 생성해 자동으로 모델에 결과물을 저장할 수 있음
# 폼을 만들어서 Post모델에 적용하기
# blog/form.py 생성
; from django import forms

; from .models import Post

; class PostForm(forms.ModelForm):

;     class Meta:
;         model = Post
;         fields = ('title', 'text',)
# 코드추가 
# PostForm 은 이름 
# forms.ModelForm은 모델 알려주는 구문
# Meta : 이폼을 만들기 위해 어떤 model이 쓰여야 하는지 알려줌
# 필드를 넣으면 완성 (author, created_date 추가도 가능 fields에)

# 폼과 페이지 링크시키기
# blog/templates/blog/base.html
; {% load static %}
; <html>
;     <head>
;         <title>Django Girls blog</title>
;         <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
;         <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">
;         <link href='//fonts.googleapis.com/css?family=Lobster&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
;         <link rel="stylesheet" href="{% static 'css/blog.css' %}">
;     </head>
;     <body>
;         <div class="page-header">
;             <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
;             <h1><a href="/">Django Girls Blog</a></h1>
;         </div>
;         <div class="content container">
;             <div class="row">
;                 <div class="col-md-8">
;                     {% block content %}
;                     {% endblock %}
;                 </div>
;             </div>
;         </div>
;     </body>
; </html>
# 코드 수정 

# URL 수정
# blog/urls.py
; from django.urls import path 
; from . import views

; urlpatterns = [
;     path('', views.post_list, name='post_list'),
;     path('post/<int:pk>/', views.post_detail, name='post_detail'),
;     path('post/new/', views.post_new, name='post_new'),
; ]
# post_new뷰를 구현하지 않아서 아직 error 뜸

# posts_new view 추가
# blog/views.py 수정
; from .forms import PostForm
; def post_new(request):
;     form = PostForm()
;     return render(request, 'blog/post_edit.html', {'form': form})

# 템플릿
# blog/templates/blog/post_edit.html 생성
; {% extends 'blog/base.html' %}

; {% block content %}
;     <h1>New post</h1>
;     <form method="POST" class="post-form">{% csrf_token %}
;         {{ form.as_p }}
;         <button type="submit" class="save btn btn-default">Save</button>
;     </form>
; {% endblock %}
# 작성
# view 추가 작업 필요

# 폼 저장하기
# blog/views.py
# 우리가 등록한 글은 request.POST가 데이터를 갖고있음(post랑은 다른것 / 그냥 장고 객체임)
# def post_new 수정하기
; def post_new(request):
;     if request.method == "POST": 
;         form = PostForm(request.POST)
;         if form.is_valid():
;             post = form.save(commit=False)
;             post.author = request.user
;             post.published_date = timezone.now()
;             post.save()
;             return redirect('post_detail', pk=post.pk)
;     else:
;         form = PostForm()
;     return render(request, 'blog/post_edit.html', {'form': form})


##############################################################################
# 블로그 글 저장하기전 게시일 설정하기
# 보안추가하기
##############################################################################


# 폼 수정하기 
# blog/templates/blog/post_detail.html
; {% extends 'blog/base.html' %}

; {% block content %}
;     <div class="post">
;         {% if post.published_date %}
;             <div class="date">
;                 {{ post.published_date }}
;             </div>
;         {% endif %}
;         <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
;         <h1>{{ post.title }}</h1>
;         <p>{{ post.text|linebreaksbr }}</p>
;     </div>
; {% endblock %}
# 코드수정

# blog/urls.py 에 추가
# path('post/<int:pk>/edit/', views.post_edit, name='post_edit'),

# view 만들기
# blog/views.py
; def post_edit(request, pk):
;     post = get_object_or_404(Post, pk=pk)
;     if request.method == "POST":
;         form = PostForm(request.POST, instance=post)
;         if form.is_valid():
;             post = form.save(commit=False)
;             post.author = request.user
;             post.published_date = timezone.now()
;             post.save()
;             return redirect('post_detail', pk=post.pk)
;     else:
;         form = PostForm(instance=post)
;     return render(request, 'blog/post_edit.html', {'form': form})
# 코드추가

# 보안
# blog/templates/blog/base.html
# page-header div를 찾아 앵커태그를 찾아서 수정
; {% if user.is_authenticated %}
;     <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
; {% endif %}

# 수정아이콘 금지하기
# blog/templates/blog/post_detail.html
; {% if user.is_authenticated %}
;      <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
; {% endif %}
# 수정

# pythonanywhere base 배포 