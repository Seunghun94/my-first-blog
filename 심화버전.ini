# blog/views.py 수정
# from django.contrib.auth.decorators import login_required
# 추가

# def 윗줄에 @login_required 모두 추가


# 사용자 로그인 구현
# mysite/urls.py 수정
; from django.contrib import admin
; from django.urls import path, include
; from django.contrib.auth import views
; from django.conf.urls import url

; urlpatterns = [
;     path('admin/', admin.site.urls),
;     url(r'^accounts/login/$', views.login, name='login'),
;     path('', include('blog.urls')),
; ]

# 로그인 템플릿 생성
# blog/templates/registration/login.html
; {% extends "blog/base.html" %}

; {% block content %}
;     {% if form.errors %}
;         <p>이름과 비밀번호가 일치하지 않습니다. 다시 시도해주세요.</p>
;     {% endif %}

;     <form method="post" action="{% url 'login' %}">
;     {% csrf_token %}
;         <table>
;         <tr>
;             <td>{{ form.username.label_tag }}</td>
;             <td>{{ form.username }}</td>
;         </tr>
;         <tr>
;             <td>{{ form.password.label_tag }}</td>
;             <td>{{ form.password }}</td>
;         </tr>
;         </table>

;         <input type="submit" value="login" />
;         <input type="hidden" name="next" value="{{ next }}" />
;     </form>
; {% endblock %}
# 코드작성

# mysite/settings.py 설정 추가
# LOGIN_REDIRECT_URL = '/'

# 레이아웃 개선하기 
# 로그인시 글 수정가능 
# blog/templates/blog/base.html
# <body> 태그 수정
; <body>
;     <div class="page-header">
;         {% if user.is_authenticated %}
;             <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>;             
;         {% else %}
;             <a href="{% url 'login' %}" class="top-menu"><span class="glyphicon glyphicon-lock"></span></a>
;         {% endif %}
;         <h1><a href="/">Django Girls Blog</a></h1>
;     </div>
;     <div class="content container">
;         <div class="row">
;             <div class="col-md-8">
;             {% block content %}
;             {% endblock %}
;             </div>
;         </div>
;     </div>
; </body>

# 로그인 중이라는 표시 나태내기
# blog/templates/blog/base.html 수정
# page-header 부분에 추가
# <p class="top-menu">Hello {{ user.username }} <small>(<a href="{% url 'logout' %}">Log out</a>)</small></p>

# mystie/urls.py에 로그아웃 url 추가
# url(r'^accounts/logout/$', views.logout, name='logout', kwargs={'next_page': '/'}),

###########################################################################################
# 도메인 만들기 - 비용 발생 ################################################################
# 무료도메인 - 12개월 최대 (freenom)
# pythonanywhere 주소 없애기
# 웹앱을 도메인과 연결 
# 도메인 구매후 -> manage DNS records 클릭
; # Hostname : www
; # Type : CNAME   -> 새로운도메인 가리키도록 설정하는것 
; # Value : pythonAnywhere의 도메인  (ex djanogogirls.pythonanywhere.com)
; # TTL : 60

# pythonanywhere 에서도 도메인 구성 설정 
# 계정 업그레이드(Hacker)
# web tab에서 가상환경경로, wsgi설정파일 내용 복사해서 따로 저장
# 이전 웹앱 삭제 
# 새로운 웹앱에서 새 도메인 이름 설정
# manual configuration 선택
# python 3.4선택
# 웹탭에서 가상환경경로 붙여넣고 wsgi 설정파일 클릭후 기존 설정파일의 내용을 붙여넣기
###########################################################################################


# 미리보기로 블로그 글 저장하기
# blog/views.py 
# def 메소드에서 post.published_date = timezone.now() 를 삭제 

# 임시 저장 기능 
# blog/urls.py
# path('drafts/', views.post_draft_list, name='post_draft_list'),

# 템플릿 전달
# blog/views.py
; def post_draft_list(request):
;     posts = Post.objects.filter(published_date__isnull=True).order_by('created_date')
;     return render(request, '<앱>/post_draft_list.html', {'posts':posts})

# 템플릿 생성
# blog/templates/post_draft_list.html
; {% extends 'portfolio/index.html' %}
; {% block content %}
;     {% for post in posts %}
;         <div class="post">
        
;             # 게시글 생성일자 일-달-연 형식으로 표시하기
            
;             <p class="date">created: {{post.created_date|date:'d-m-Y'}}</p>
            
;             <h1><a href="{% url 'post_detail' pk=post.pk %}">{{post.title}}</a></h1>
            
;             # 200 글자가 넘으면 자르기
            
;             <p>{{post.text|truncatechars:200}}</p>
            
;         </div>
;     {% endfor %}
; {% endblock %}

# 이동버튼 추가
# blog/templates/base.html
# <a href="{% url 'post_draft_list' %}" class="top-menu"><span class="glyphicon glyphicon-edit"></span></a>
# {% if user.is_authenticated %} 밑에 추가

# 임시글 게시하기
# blog/urls.py
# path('post/<int:pk>/publish/', views.post_publish, name='post_publish'),

# blog/views.py
; def post_publish(request, pk):
;     post = get_object_or_404(Post, pk=pk)
;     post.publish()
;     return redirect('post_detail', pk=pk)

# 버튼생성
# blog/templates/post_detail.html
; {% else %}
;     <a href="{% url 'post_publish' pk=post.pk %}" class="btn btn-default"><span class='glyphicon glyphicon-pencil'>게시</span></a>
# {% endif %}  위에 추가

# 게시글 삭제하기
# blog/urls.py
# path('post/<int:pk>/remove/', views.post_remove, name='post_remove'),

# 템플릿 수정
# blog/templates/blog/post_detail.html
# <a href="{% url 'post_remove' pk=post.pk %}" class="btn btn-default"><span class="glyphicon glyphicon-remove"></span></a>
# edit 밑에 추가 else구문써서

# blog/views.py 수정
; def post_remove(request, pk):
;     post = get_object_or_404(Post, pk=pk)
;     post.delete()
;     return redirect('post_list')
